// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:mobile/app/models/repository_model_entity.dart';
import 'package:mobile/generated/json/repository_model_entity_helper.dart';
import 'package:mobile/app/models/contributor_model_entity.dart';
import 'package:mobile/generated/json/contributor_model_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case RepositoryModelEntity:
				return repositoryModelEntityFromJson(data as RepositoryModelEntity, json) as T;
			case RepositoryModelItems:
				return repositoryModelItemsFromJson(data as RepositoryModelItems, json) as T;
			case RepositoryModelItemsOwner:
				return repositoryModelItemsOwnerFromJson(data as RepositoryModelItemsOwner, json) as T;
			case RepositoryModelItemsLicense:
				return repositoryModelItemsLicenseFromJson(data as RepositoryModelItemsLicense, json) as T;
			case ContributorModelEntity:
				return contributorModelEntityFromJson(data as ContributorModelEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case RepositoryModelEntity:
				return repositoryModelEntityToJson(data as RepositoryModelEntity);
			case RepositoryModelItems:
				return repositoryModelItemsToJson(data as RepositoryModelItems);
			case RepositoryModelItemsOwner:
				return repositoryModelItemsOwnerToJson(data as RepositoryModelItemsOwner);
			case RepositoryModelItemsLicense:
				return repositoryModelItemsLicenseToJson(data as RepositoryModelItemsLicense);
			case ContributorModelEntity:
				return contributorModelEntityToJson(data as ContributorModelEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (RepositoryModelEntity).toString()){
			return RepositoryModelEntity().fromJson(json);
		}
		if(type == (RepositoryModelItems).toString()){
			return RepositoryModelItems().fromJson(json);
		}
		if(type == (RepositoryModelItemsOwner).toString()){
			return RepositoryModelItemsOwner().fromJson(json);
		}
		if(type == (RepositoryModelItemsLicense).toString()){
			return RepositoryModelItemsLicense().fromJson(json);
		}
		if(type == (ContributorModelEntity).toString()){
			return ContributorModelEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<RepositoryModelEntity>[] is M){
			return data.map<RepositoryModelEntity>((e) => RepositoryModelEntity().fromJson(e)).toList() as M;
		}
		if(<RepositoryModelItems>[] is M){
			return data.map<RepositoryModelItems>((e) => RepositoryModelItems().fromJson(e)).toList() as M;
		}
		if(<RepositoryModelItemsOwner>[] is M){
			return data.map<RepositoryModelItemsOwner>((e) => RepositoryModelItemsOwner().fromJson(e)).toList() as M;
		}
		if(<RepositoryModelItemsLicense>[] is M){
			return data.map<RepositoryModelItemsLicense>((e) => RepositoryModelItemsLicense().fromJson(e)).toList() as M;
		}
		if(<ContributorModelEntity>[] is M){
			return data.map<ContributorModelEntity>((e) => ContributorModelEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}